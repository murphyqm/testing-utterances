---
title: "Interactive Map with Utterances"
format: html
output: 
  html_document:
    code-fold: true
    toc: true
---

## Interactive Map

This is a very simple prototype dashboard. Mouse around the map below, and use the layers menu (top right-hand corner of the map)
to view different map layers and resources, which can be toggled.

Providing a sortable, searchable table of the underlying data also improves accessibility.

::: {.panel-tabset}

## Map of Community Resources

```{python}
#| echo: false

import folium
import geopandas as gpd
from IPython.display import display, HTML

# Create a map centered around Ireland
map_ireland = folium.Map(location=[51.6223, -8.889], zoom_start=16, tiles=None)  # Clonakilty
folium.TileLayer('openstreetmap', name='Traditional').add_to(map_ireland)
folium.TileLayer('cartodbpositron', name='Minimal').add_to(map_ireland)
folium.TileLayer(
        tiles = 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',
        attr = 'Esri',
        name = 'Esri Satellite',
        overlay = False,
        control = True
       ).add_to(map_ireland)

# Define the points, each with a name, coordinates, and popup content
points = [
    {"coords": [-8.893827490473342, 51.62269906303828], "name": "Community centre"},
    {"coords": [-8.890217905596785, 51.621676172124666], "name": "Parish hall"},
    {"coords": [-8.88721201435851, 51.62254289797838], "name": "Co-operative caf√©"},
    {"coords": [-8.886985629245714, 51.62178548981129], "name": "Methodist hall"}
]

# Create a FeatureGroup to hold the points, so we can toggle them on/off together
point_layer = folium.FeatureGroup(name="Community resources").add_to(map_ireland)

# Add the points to the layer with their names in the pop-up
for point in points:
    folium.Marker(
        location=[point["coords"][1], point["coords"][0]],  # [lat, lon]
        popup=point["name"]+'.</br><b>Resource type: community resource.</b></br></br>More information can go here; this stays open until you exit it.',
        tooltip = 'Location: '+point["name"]+'. Click for more information',
    ).add_to(point_layer)

# Add a GeoJSON layer for boundary regions (optional)
geojson_file = 'clonakilty.geojson'

gdf = gpd.read_file(geojson_file)

# Create a GeoJSON layer for the regions (as a separate layer)
geojson_layer = folium.FeatureGroup(name="Clonakilty town boundary").add_to(map_ireland)
folium.GeoJson(gdf,
tooltip = 'Clonakilty town centre. Layers like this could include heatmaps.',).add_to(geojson_layer)

# Add Layer Control to toggle between layers
folium.LayerControl().add_to(map_ireland)

map_ireland
```

## User Comments with Utterances

```{html}
<!-- Utterances script to enable commenting and fetching data -->
<script src="https://utteranc.es/client.js"
  repo="your-github-username/your-repo" <!-- Replace with your GitHub repo -->
  issue-term="pathname"
  label="location"
  theme="github-light"
  crossorigin="anonymous"
  async>
</script>

<!-- Container for the map and user comments -->
<div id="map" style="height: 500px;"></div>

<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<script>
  // Initialize the map
  var map = L.map('map').setView([51.6223, -8.889], 16); // Center on Clonakilty

  // Add OpenStreetMap tiles as the base map
  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
  }).addTo(map);

  // Function to fetch and display comments with coordinates
  async function fetchComments() {
    // Fetch issues from GitHub using the GitHub API
    const response = await fetch('https://api.github.com/repos/your-github-username/your-repo/issues?labels=location');  // Replace with your repo
    const issues = await response.json();

    // Loop through the issues and add markers to the map based on the comment body
    issues.forEach(function(issue) {
      const comment = issue.body;  // The comment text, which should contain lat, lon
      const regex = /(-?\d+\.\d+),\s*(-?\d+\.\d+)/;  // Regex to match lat, lon
      const match = comment.match(regex);

      if (match) {
        const lat = parseFloat(match[1]);
        const lon = parseFloat(match[2]);
        L.marker([lat, lon]).addTo(map)
          .bindPopup('<b>' + issue.title + '</b><br>' + comment);
      }
    });
  }

  // Fetch comments when the page loads
  fetchComments();
</script>
```